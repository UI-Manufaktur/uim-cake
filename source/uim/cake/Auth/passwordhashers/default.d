module uim.cake.Auth;

@safe:
import uim.cake;

/**
 * Default password hashing class.
 */
class DefaultPasswordHasher : AbstractPasswordHasher {
    /**
     * Default config for this object.
     *
     * ### Options
     *
     * - `hashType` - Hashing algo to use. Valid values are those supported by `$algo`
     *   argument of `password_hash()`. Defaults to `PASSWORD_DEFAULT`
     * - `hashOptions` - Associative array of options. Check the PHP manual for
     *   supported options for each hash type. Defaults to empty array.
     *
     * @var array<string, mixed>
     */
    protected $_defaultConfig = [
        'hashType' => PASSWORD_DEFAULT,
        'hashOptions' => [],
    ];

    /**
     * Generates password hash.
     *
     * @param string myPassword Plain text password to hash.
     * @return string|false Password hash or false on failure
     * @psalm-suppress InvalidNullableReturnType
     * @link https://book.cakephp.org/4/en/controllers/components/authentication.html#hashing-passwords
     */
    function hash(string myPassword)
    {
        /** @psalm-suppress NullableReturnStatement */
        return password_hash(
            myPassword,
            this._config['hashType'],
            this._config['hashOptions']
        );
    }

    /**
     * Check hash. Generate hash for user provided password and check against existing hash.
     *
     * @param string myPassword Plain text password to hash.
     * @param string myHashedPassword Existing hashed password.
     * @return bool True if hashes match else false.
     */
    function check(string myPassword, string myHashedPassword): bool
    {
        return password_verify(myPassword, myHashedPassword);
    }

    /**
     * Returns true if the password need to be rehashed, due to the password being
     * created with anything else than the passwords generated by this class.
     *
     * @param string myPassword The password to verify
     * @return bool
     */
    function needsRehash(string myPassword): bool
    {
        return password_needs_rehash(myPassword, this._config['hashType'], this._config['hashOptions']);
    }
}
