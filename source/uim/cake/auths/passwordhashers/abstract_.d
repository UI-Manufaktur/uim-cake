/*********************************************************************************************************
	Copyright: © 2015-2023 Ozan Nurettin Süel (Sicherheitsschmiede)                                        
	License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.  
	Authors: Ozan Nurettin Süel (Sicherheitsschmiede)                                                      
**********************************************************************************************************/
module uim.cake.auths.passwordhashers.abstract_;

@safe:
import uim.cake

module uim.cake.auths.passwordhashers;

import uim.cake.core.InstanceConfigTrait;

// Abstract password hashing class
abstract class AbstractPasswordHasher {
    use InstanceConfigTrait;

    /**
     * Default config
     */
    protected Json _defaultConfig = [];

    this(
        Json aConfig = [] // aConfig - Config data
    ) {
        this.setConfig(aConfig);
    }

    /**
     * Generates password hash.
     *
     * aPassword - Plain text password to hash.
     * returns Either the password hash string or null if false
     */
    abstract string hash(string aPassword);

    /**
     * Check hash. Generate hash from user provided password string or data array
     * and check against existing hash.
     *
     * aPassword - Plain text password to hash.
     * aHashedPassword - Existing hashed password.
     * returns True if hashes match else false.
     */
    abstract bool check(string aPassword, string aHashedPassword);

    /**
     * Returns true if the password need to be rehashed, due to the password being
     * created with anything else than the passwords generated by this class.
     *
     * Returns true by default since the only implementation users should rely
     * on is the one provided by default in php 5.5+ or any compatible library
     *
     * aPassword -The password to verify
     */
    bool needsRehash(string aPassword) {
        return password_needs_rehash($password, PASSWORD_DEFAULT);
    }
}
